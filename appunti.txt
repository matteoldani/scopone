file communication handled by express library
client-server data communication handled by socket.io library 


VECCHIE PARTI DI CODICE CHE NON SERVONO PIU' MA CHE POTREBBERO ESSERE UTILI

var SOCKET_LIST = {};
var PLAYER_LIST = {};
var TABLE_LIST = {};

var contatorePlayer = 0;
var contatoreTavoli = 0;

//cancellabile ma non ora perchè viene usato nel game initi
var Player = function(nickname, socketID) {
  var self = {
    id: socketID,
    nickname: nickname,
    tavolo: null,
    team: null,
    mano: []
  };

  return self;
};

//probabilmete obsoleta
var CheckNum = function() {
  do {
    var trovato = false;
    var num = Math.floor(Math.random() * 100);
    for (var i in TABLE_LIST.length) {
      if (TABLE_LIST[i].id == num) {
        trovato == true;
      }
    }
  } while (trovato);

  return num;
};

//obsoleto
var Table = function(player, nome) {
  var self = {
    id: CheckNum(),
    player1: player,
    player2: null,
    player3: null,
    player4: null,
    numPart: 1,
    nome: nome,

    addPlayer: function(player) {
      if (self.player2 == null) {
        self.player2 = player;
      } else if (self.player3 == null) {
        self.player3 = player;
      } else if (self.player4 == null) {
        self.player4 = player;
      } else {
        console.log("tavolo pieno");
      }
    }
  };
  return self;
};


/* vecchia versione
io.sockets.on("connection", function(socket) {
  console.log("socket connection");

  //assegno un numero al socket e lo aggiungo alla lista dei socket
  socket.id = Math.random();
  SOCKET_LIST[socket.id] = socket;

  //ricevo il nome del giocatore e creo il player
  socket.on("nickname", function(data) {
    PLAYER_LIST[socket.id] = Player(data.nickname, socket.id);
    contatorePlayer++;
    console.log(PLAYER_LIST[socket.id]);
  });

  //viene inviato al socket il numero del tavolo da condividere con i player
  var emitTable = function(num) {
    socket.emit("tableNum", {
      num: num
    });
  };

  //richiesta creazione tavolo
  socket.on("creazione", function(data) {
    TABLE_LIST[contatoreTavoli] = Table(PLAYER_LIST[socket.id], data.nome);
    PLAYER_LIST[socket.id].tavolo = TABLE_LIST[contatoreTavoli].id;
    emitTable(TABLE_LIST[contatoreTavoli].id);
    contatoreTavoli++;
    console.log(TABLE_LIST[contatoreTavoli]);
  });

  //mostro i giocatori nel tavolo inviando al client la lista aggiornata di tutti i partecipanti
  var findTableWithNumber = function(number) {
    var trovato = false;
    var i = 0;
    while (!trovato && i < contatoreTavoli) {
      if (TABLE_LIST[i].id == number) {
        trovato = true;
        return i;
      }
      i++;
    }
    return -1;
  };

  //vengono salvati i partecipanti a un tavolo da inviare una volta che il tavolo è completo.
  var partercipanti = function(numTable) {
    var socketPartecipanti = {};
    var number = findTableWithNumber(numTable);
    socketPartecipanti[0] = SOCKET_LIST[TABLE_LIST[number].player1.id];
    socketPartecipanti[1] = SOCKET_LIST[TABLE_LIST[number].player2.id];
    socketPartecipanti[2] = SOCKET_LIST[TABLE_LIST[number].player3.id];
    socketPartecipanti[3] = SOCKET_LIST[TABLE_LIST[number].player4.id];

    var pack = {
      num: numTable,
      player1: PLAYER_LIST[socketPartecipanti[0].id].nickname,
      player2: PLAYER_LIST[socketPartecipanti[1].id].nickname,
      player3: PLAYER_LIST[socketPartecipanti[2].id].nickname,
      player4: PLAYER_LIST[socketPartecipanti[3].id].nickname
    };

    /*
    for(var i in socketPartecipanti){
      socketPartecipanti[i].emit('partecipanti', pack);
    }


    for (var i in socketPartecipanti) {
      socketPartecipanti[i].emit("start", pack);
    }

    initGame(socketPartecipanti);
  };

  //il client invia la richiesta di unirsi a un tavolo, nel data ci sarà il numero del tavolo e la posizione del player
  socket.on("join", function(data) {
    //ricerco se il tavolo esiste e inserisco il giocatore
    var trovato = false;
    var i = 0;
    PLAYER_LIST[socket.id].tavolo = data.num;
    while (!trovato && i < contatoreTavoli) {
      if (TABLE_LIST[i].id == data.num) {
        trovato = true;
        TABLE_LIST[i].addPlayer(PLAYER_LIST[socket.id]);
        TABLE_LIST[i].numPart++;
        if (TABLE_LIST[i].numPart == 4) {
          partercipanti(TABLE_LIST[i].id);
        }
      }
      console.log(
        "ho trovato il tavolo e ha " + TABLE_LIST[i].numPart + " partecipanti"
      );
      i++;
    }
  });

  //elimino il socket quando si disconnette
  socket.on("disconnect", function() {
    delete SOCKET_LIST[socket.id];
    delete PLAYER_LIST[socket.id];
    contatorePlayer--;
    //bisogna aggiungere che vengono eliminati i tavoli dove i player se ne vanno ma lo faremo più
    //ora ci affidaimo al buon senso
  });
});
*/



/*  VECCHIA VERSIONE DISTRIBUZIONE MANI
  for (var i = 0; i < 10; i++) {
    mano1[i] = mazzo[numeri[i] - 1];
  }
  PLAYER_LIST[socket2[0]].mano = mano1;
  mani[0] = ordinaMano(mano1);

  for (var i = 10; i < 20; i++) {
    mano2[i - 10] = mazzo[numeri[i] - 1];
  }
  PLAYER_LIST[socket2[1]].mano = mano2;
  mani[1] = ordinaMano(mano2);

  for (var i = 20; i < 30; i++) {
    mano3[i - 20] = mazzo[numeri[i] - 1];
  }
  PLAYER_LIST[socket2[2]].mano = mano3;
  mani[2] = ordinaMano(mano3);

  for (var i = 30; i < 40; i++) {
    mano4[i - 30] = mazzo[numeri[i] - 1];
  }
  PLAYER_LIST[socket2[3]].mano = mano4;
  mani[3] = ordinaMano(mano4);

  //invio le mani ai vari player
  for (var i = 0; i < 4; i++) {
    sockets[i].emit("mano", mani[i]);
  }
  */

  /*IMPLEMENTERO' PIU' AVANTI QUESTA FEATURE

  //stabilisco chi deve iniziare
  var cas = Math.floor(Math.random()*4);

  //ordino i socket così che il primo a giocare sia anche il primo della lista senza rovinare l'ordine
  var socket2 = [];
  var i;
  var j = 0;

  for(i=cas;i<4;i++){
    socket2[j] = sockets[i];
    j++;
  }

  for(i = 0;i<cas;i++){
    socket2[j] = sockets[i];
    j++;

  }
  */

